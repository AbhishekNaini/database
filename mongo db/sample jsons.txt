Here are three JSON data collections, each containing at least 10 documents, that you can use for practicing aggregation in MongoDB:

Students Collection:

json

[
  { "_id": 1, "name": "Alice", "age": 20, "grade": "A" },
  { "_id": 2, "name": "Bob", "age": 22, "grade": "B" },
  { "_id": 3, "name": "Charlie", "age": 21, "grade": "B" },
  { "_id": 4, "name": "David", "age": 23, "grade": "A" },
  { "_id": 5, "name": "Eve", "age": 20, "grade": "C" },
  { "_id": 6, "name": "Frank", "age": 22, "grade": "B" },
  { "_id": 7, "name": "Grace", "age": 21, "grade": "B" },
  { "_id": 8, "name": "Harry", "age": 23, "grade": "A" },
  { "_id": 9, "name": "Ivy", "age": 20, "grade": "C" },
  { "_id": 10, "name": "Jack", "age": 22, "grade": "B" }
]
Orders Collection:

json

[
  { "_id": 1, "product": "A", "quantity": 5, "price": 10.99 },
  { "_id": 2, "product": "B", "quantity": 3, "price": 15.99 },
  { "_id": 3, "product": "A", "quantity": 7, "price": 10.99 },
  { "_id": 4, "product": "C", "quantity": 2, "price": 20.99 },
  { "_id": 5, "product": "B", "quantity": 4, "price": 15.99 },
  { "_id": 6, "product": "A", "quantity": 3, "price": 10.99 },
  { "_id": 7, "product": "C", "quantity": 5, "price": 20.99 },
  { "_id": 8, "product": "B", "quantity": 2, "price": 15.99 },
  { "_id": 9, "product": "A", "quantity": 6, "price": 10.99 },
  { "_id": 10, "product": "C", "quantity": 3, "price": 20.99 }
]
Employees Collection:

json

[
  { "_id": 1, "name": "Alice", "department": "HR", "salary": 50000 },
  { "_id": 2, "name": "Bob", "department": "IT", "salary": 60000 },
  { "_id": 3, "name": "Charlie", "department": "HR", "salary": 55000 },
  { "_id": 4, "name": "David", "department": "Finance", "salary": 65000 },
  { "_id": 5, "name": "Eve", "department": "IT", "salary": 62000 },
  { "_id": 6, "name": "Frank", "department": "HR", "salary": 54000 },
  { "_id": 7, "name": "Grace", "department": "Finance", "salary": 67000 },
  { "_id": 8, "name": "Harry", "department": "IT", "salary": 61000 },
  { "_id": 9, "name": "Ivy", "department": "HR", "salary": 56000 },
  { "_id": 10, "name": "Jack", "department": "IT", "salary": 63000 }
]
Feel free to use these collections to practice aggregation queries in MongoDB!
Question: How do you find the total sales amount for each product?

Answer:
json

db.orders.aggregate([
  {
    $group: {
      _id: "$product",
      totalSalesAmount: { $sum: { $multiply: ["$quantity", "$price"] } }
    }
  }
])
Question: What is the average price for each product category?

Answer:
json

db.orders.aggregate([
  {
    $group: {
      _id: "$category",
      averagePrice: { $avg: "$price" }
    }
  }
])
Question: How do you find the total quantity sold for each product?

Answer:
json

db.orders.aggregate([
  {
    $group: {
      _id: "$product",
      totalQuantity: { $sum: "$quantity" }
    }
  }
])
Question: Find the top 3 products by total sales amount.

Answer:
json

db.orders.aggregate([
  {
    $group: {
      _id: "$product",
      totalSalesAmount: { $sum: { $multiply: ["$quantity", "$price"] } }
    }
  },
  { $sort: { totalSalesAmount: -1 } },
  { $limit: 3 }
])
Question: Calculate the total sales amount for each month.

Answer:
json

db.orders.aggregate([
  {
    $group: {
      _id: { $month: "$date" },
      totalSalesAmount: { $sum: { $multiply: ["$quantity", "$price"] } }
    }
  }
])
Question: What is the average salary for each department?

Answer:
json

db.employees.aggregate([
  {
    $group: {
      _id: "$department",
      averageSalary: { $avg: "$salary" }
    }
  }
])
Question: How many employees are there in each department?

Answer:
json

db.employees.aggregate([
  {
    $group: {
      _id: "$department",
      totalEmployees: { $sum: 1 }
    }
  }
])
Question: Find the highest salary in each department.

Answer:
json

db.employees.aggregate([
  {
    $group: {
      _id: "$department",
      highestSalary: { $max: "$salary" }
    }
  }
])
Question: Calculate the total quantity sold for each category.

Answer:
json

db.orders.aggregate([
  {
    $group: {
      _id: "$category",
      totalQuantity: { $sum: "$quantity" }
    }
  }
])
Question: Find the average age of students in each grade.

Answer:
json

db.students.aggregate([
  {
    $group: {
      _id: "$grade",
      averageAge: { $avg: "$age" }
    }
  }
])