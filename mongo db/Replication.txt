Replication:
Replication in MongoDB is the process of synchronizing data across multiple servers to ensure data availability, fault tolerance, and scalability. In MongoDB, replication is achieved through replica sets, which are a group of MongoDB servers that maintain the same data set. Replica sets provide high availability and data redundancy by automatically electing a primary node to serve read and write operations, while the other nodes (secondaries) replicate data from the primary.

Key Concepts:

Primary Node: The primary node is the main node in a replica set that receives all write operations. It is the only node that can accept write operations.

Secondary Nodes: Secondary nodes replicate data from the primary node and can serve read operations. They also automatically step up as the primary node if the current primary becomes unavailable.

Oplog (Operation Log): The oplog is a special capped collection that stores all write operations in the order they occur. It is used by secondary nodes to replicate operations from the primary.

Election: Replica sets use a consensus algorithm to elect a new primary node if the current primary becomes unavailable. The election process ensures that only one primary node is active at a time.

Example:

Let's create a simple replica set with three nodes: one primary and two secondaries.

Initialize the Replica Set:

javascript

rs.initiate({
  _id: "rs0",
  members: [
    { _id: 0, host: "mongodb1.example.net:27017" },
    { _id: 1, host: "mongodb2.example.net:27017" },
    { _id: 2, host: "mongodb3.example.net:27017" }
  ]
});
Check the Replica Set Status:

javascript

rs.status();
Add a New Node to the Replica Set:

javascript

rs.add("mongodb4.example.net:27017");
Remove a Node from the Replica Set:

javascript

rs.remove("mongodb3.example.net:27017");
View the Oplog:

javascript

use local
db.oplog.rs.find();
Advantages of Replication:

High Availability: If the primary node fails, a secondary node can be promoted to primary, ensuring that the database remains available.

Fault Tolerance: Data is replicated across multiple nodes, reducing the risk of data loss due to hardware failure or other issues.

Scalability: Replica sets allow you to scale out read operations by distributing read traffic among secondary nodes.

Durability: Write operations are acknowledged only after data is replicated to a majority of nodes, ensuring data durability.

Replication in MongoDB is a key feature that provides data redundancy, fault tolerance, and scalability, making it suitable for a wide range of applications.